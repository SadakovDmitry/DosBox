import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandObject
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BotCommand

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "7328818129:AAHPyi3c4uYnXPzrYqG6v3lMBkBgKLVtz2Y"
CPP_BINARY = "./bank_app"

bot = Bot(token=TOKEN)
dp = Dispatcher()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á—ë—Ç")],
        [KeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")],
        [KeyboardButton(text="–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å")]
    ],
    resize_keyboard=True
)

class Form(StatesGroup):
    reg_name = State()
    reg_lastname = State()
    reg_address = State()
    reg_passport = State()
    account_passport = State()
    account_type = State()
    account_balance = State()
    transfer_from = State()
    transfer_to = State()
    transfer_amount = State()
    balance_name = State()
    balance_lastname = State()
    select_account = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–∫–æ–≤—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

@dp.message(lambda message: message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def register_user_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
    await state.set_state(Form.reg_name)

@dp.message(Form.reg_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Form.reg_lastname)

@dp.message(Form.reg_lastname)
async def process_lastname(message: types.Message, state: FSMContext):
    await state.update_data(lastname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    await state.set_state(Form.reg_address)

@dp.message(Form.reg_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    await state.set_state(Form.reg_passport)

@dp.message(Form.reg_passport)
async def process_passport(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    result = await run_cpp_command([
        "create_user",
        user_data['name'],
        user_data['lastname'],
        user_data['address'],
        message.text
    ])
    await message.answer(result)
    await state.clear()

@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á—ë—Ç")
async def create_account_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    await state.set_state(Form.account_passport)

@dp.message(Form.account_passport)
async def process_account_passport(message: types.Message, state: FSMContext):
    result = await run_cpp_command(["check_user", message.text])
    if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result:
        await message.answer(result)
        await state.clear()
        return

    await state.update_data(passport=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–µ–±–µ—Ç–æ–≤—ã–π")],
            [KeyboardButton(text="–ö—Ä–µ–¥–∏—Ç–Ω—ã–π")],
            [KeyboardButton(text="–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç–∞:", reply_markup=keyboard)
    await state.set_state(Form.account_type)

@dp.message(Form.account_type)
async def process_account_type(message: types.Message, state: FSMContext):
    type_map = {
        "–î–µ–±–µ—Ç–æ–≤—ã–π": "0",
        "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π": "1",
        "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π": "2"
    }
    if message.text not in type_map:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—á–µ—Ç–∞!")
        return

    await state.update_data(type=type_map[message.text])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.account_balance)

@dp.message(Form.account_balance)
async def process_account_balance(message: types.Message, state: FSMContext):
    try:
        balance = float(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!")
        return

    user_data = await state.get_data()
    result = await run_cpp_command([
        "create_account",
        user_data['passport'],
        user_data['type'],
        str(balance)
    ])
    await message.answer(result, reply_markup=main_keyboard)
    await state.clear()

@dp.message(lambda message: message.text == "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")
async def transfer_money_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")
    await state.set_state(Form.transfer_from)

@dp.message(Form.transfer_from)
async def process_transfer_from(message: types.Message, state: FSMContext):
    result = await run_cpp_command(["check_user", message.text])
    if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result:
        await message.answer(result)
        await state.clear()
        return

    await state.update_data(from_passport=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(Form.transfer_to)

@dp.message(Form.transfer_to)
async def process_transfer_to(message: types.Message, state: FSMContext):
    result = await run_cpp_command(["check_user", message.text])
    if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result:
        await message.answer(result)
        await state.clear()
        return

    await state.update_data(to_passport=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:")
    await state.set_state(Form.transfer_amount)

@dp.message(Form.transfer_amount)
async def process_transfer_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!")
        return

    user_data = await state.get_data()
    result = await run_cpp_command([
        "transfer",
        user_data['from_passport'],
        user_data['to_passport'],
        str(amount)
    ])
    await message.answer(result, reply_markup=main_keyboard)
    await state.clear()

@dp.message(lambda message: message.text == "–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å")
async def check_balance_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(Form.balance_name)

@dp.message(Form.balance_name)
async def process_balance_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(Form.balance_lastname)

@dp.message(Form.balance_lastname)
async def process_balance_lastname(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    result = await run_cpp_command([
        "find_user",
        user_data['name'],
        message.text
    ])
    if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in result:
        await message.answer(result)
        await state.clear()
        return

    accounts = parse_accounts(result)
    if not accounts:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—á–µ—Ç–æ–≤")
        await state.clear()
        return

    buttons = [[KeyboardButton(text=acc['id'])] for acc in accounts]
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )
    await state.update_data(accounts=accounts)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç:", reply_markup=keyboard)
    await state.set_state(Form.select_account)

@dp.message(Form.select_account)
async def process_select_account(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    selected = next((acc for acc in user_data['accounts'] if acc['id'] == message.text), None)
    if not selected:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—á–µ—Ç–∞!")
        return

    await message.answer(
        f"–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ {selected['id']} ({selected['type']}): {selected['balance']}",
        reply_markup=main_keyboard
    )
    await state.clear()

async def run_cpp_command(args):
    try:
        proc = await asyncio.create_subprocess_exec(
            CPP_BINARY,
            *args,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await proc.communicate()
        if proc.returncode != 0:
            return f"–û—à–∏–±–∫–∞: {stderr.decode().strip()}"
        return stdout.decode().strip()
    except Exception as e:
        logger.error(f"C++ error: {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"

def parse_accounts(output):
    accounts = []
    for line in output.split('\n'):
        if line.startswith("ACCOUNT|"):
            parts = line.split('|')
            accounts.append({
                'id': parts[1],
                'type': parts[2],
                'balance': parts[3]
            })
    return accounts

if __name__ == "__main__":
    if not os.path.exists(CPP_BINARY):
        raise FileNotFoundError(f"C++ binary not found at {CPP_BINARY}")
    asyncio.run(dp.start_polling(bot))
